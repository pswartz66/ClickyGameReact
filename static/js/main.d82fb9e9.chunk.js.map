{"version":3,"sources":["Components/Navbar/Navbar.js","Components/Header/Header.js","Components/Container/Container.js","Components/Facecard/Facecard.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","status","score","maxScore","Header","Container","fluid","Facecard","onClick","handleIncrement","id","alt","name","src","image","Footer","style","fontWeight","App","state","guessedIds","includes","maximumScore","Math","max","topScores","filteredTopScores","filter","num","length","setState","push","randomizeFaces","faces","arr","sort","random","this","map","face","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m7DA0BeA,G,YAtBA,SAAAC,GACX,OAEI,yBAAKC,UAAU,wDAEX,wBAAIA,UAAU,cACV,wBAAIA,UAAU,YAAd,gBAGJ,wBAAIA,UAAU,cACV,wBAAIA,UAAU,YAAYD,EAAME,OAASF,EAAME,OAAS,6BAG5D,wBAAID,UAAU,cACV,wBAAIA,UAAU,YAAd,UAAiCD,EAAMG,MAAvC,iBAA4DH,EAAMI,c,MCDnEC,MAdf,WAEI,OACI,yBAAKJ,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,yBAAd,eACA,wBAAIA,UAAU,wBAAd,0BACA,uBAAGA,UAAU,QAAb,+ECKDK,G,MAZG,SAAAN,GAEd,OAEI,uCAAKC,UAAS,mBAAcD,EAAMO,MAAQ,SAAW,KAAUP,MCQxDQ,G,MAZE,SAAAR,GAEb,OACA,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKQ,QAAS,kBAAMT,EAAMU,gBAAgBV,EAAMW,KAAKV,UAAU,mBAAmBU,GAAIX,EAAMW,GAAIC,IAAKZ,EAAMa,KAAMC,IAAKd,EAAMe,Y,aCQzHC,MAZf,WACI,OACI,4BAAQf,UAAU,UACd,yBAAKA,UAAU,UAAf,gBACiB,0BAAMgB,MAAO,CAACC,WAAY,QAA1B,wBCgFdC,E,YA9Eb,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KAiBRU,gBAAkB,SAACC,GAEjB,GAAI,EAAKS,MAAMC,WAAWC,SAASX,GAAK,CAEtC,IAAIY,EAAeC,KAAKC,IAAL,MAAAD,KAAI,YAAQ,EAAKJ,MAAMM,YAEtCC,EAAoB,EAAKP,MAAMM,UAAUE,QAAO,SAAAC,GAAG,OAAIA,GAAOL,KAAKC,IAAL,MAAAD,KAAI,YAAQ,EAAKJ,MAAMM,eAErF,EAAKN,MAAMjB,OAAS,EAAKiB,MAAMC,WAAWS,QAE9C,EAAKC,SAAS,CAAE5B,MAAO,EACPD,OAAQ,0BACRE,SAAUmB,EACVG,UAAWC,EACXN,WAAY,UAK5B,EAAKD,MAAMC,WAAWW,KAAKrB,GAE3B,EAAKS,MAAMM,UAAUM,KAAK,EAAKZ,MAAMC,WAAWS,QAEhD,EAAKC,SAAS,CAAE5B,MAAO,EAAKiB,MAAMjB,MAAQ,EAC1BD,OAAQ,0BAK1B,EAAK+B,eAAe,EAAKb,MAAMc,QA/Cd,EAkDnBD,eAAiB,SAACE,GAEhBA,EAAIC,MAAK,iBAAM,GAAMZ,KAAKa,YAE1B,EAAKN,SAAS,CAAEG,MAAOC,KApDvB,EAAKf,MAAQ,CACXc,QACA/B,MAAO,EACPuB,UAAW,CAAC,GACZtB,SAAU,EACViB,WAAY,GACZnB,OAAQ,IARO,E,iFAcjBoC,KAAKL,eAAeK,KAAKlB,MAAMc,S,+BA2CvB,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CAAQhC,OAAQoC,KAAKlB,MAAMlB,OAAQC,MAAOmC,KAAKlB,MAAMjB,MAAOC,SAAUkC,KAAKlB,MAAMhB,WACjF,kBAAC,EAAD,MACA,kBAAC,EAAD,KACCkC,KAAKlB,MAAMc,MAAMK,KAAI,SAAAC,GAAI,OACxB,kBAAC,EAAD,CACE7B,GAAI6B,EAAK7B,GACTE,KAAM2B,EAAK3B,KACXE,MAAOyB,EAAKzB,MACZL,gBAAiB,EAAKA,sBAI1B,kBAAC,EAAD,W,GAzEU+B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d82fb9e9.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\n\nconst Navbar = props => {\n    return (\n\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark nav-main\">\n\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">Clicky Game</li>\n            </ul>\n\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">{props.status ? props.status : 'Click an image to begin!'}</li>\n            </ul>\n\n            <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">Score: {props.score} | Top Score: {props.maxScore}</li>\n            </ul>\n\n        </nav>\n\n    )\n}\n\nexport default Navbar;\n\n","import React from 'react';\nimport './Header.css'\n\nfunction Header() {\n\n    return (\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4 header-main\">Clicky Game</h1>\n                <h2 className=\"display-6 header-sub\">Silicon Valley Edition</h2>\n                <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Header;\n","import React from 'react';\nimport './Container.css';\n\nconst Container = props => {\n\n    return (\n        \n        <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n\n    )\n\n\n}\n\n\nexport default Container;\n","import React from 'react';\nimport './Facecard.css'\n\nconst Facecard = props => {\n\n    return (\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <img onClick={() => props.handleIncrement(props.id)} className=\"card-image shake\" id={props.id} alt={props.name} src={props.image}/>\n\n        </div>\n    </div>\n    )\n}\n\nexport default Facecard;","import React from 'react';\nimport './Footer.css';\n\n\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <div className=\"bottom\">\n                Clicky Game! <span style={{fontWeight: '500'}}>powered by @React</span>\n            </div>\n\n        </footer>\n\n    )\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport Header from './Components/Header';\nimport Container from './Components/Container';\nimport Facecard from './Components/Facecard';\nimport faces from './../src/faces.json';\nimport Footer from './Components/Footer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      faces,\n      score: 0,\n      topScores: [0],\n      maxScore: 0,\n      guessedIds: [],\n      status: \"\"\n    }\n  }\n\n  componentDidMount() {\n    // shuffle Facecards on initial refresh (i.e. when page is refreshed)\n    this.randomizeFaces(this.state.faces);\n  }\n\n  // increases this.state.score by 1 when card is clicked\n  handleIncrement = (id) => {\n\n    if (this.state.guessedIds.includes(id)) {\n      // set a variable to get the max of the topScores array\n      let maximumScore = Math.max(...this.state.topScores);\n      // filterTopScores to reduce size and duplicates\n      let filteredTopScores = this.state.topScores.filter(num => num >= Math.max(...this.state.topScores));\n\n      if (this.state.score >= this.state.guessedIds.length) {\n      // reset score back to 0\n      this.setState({ score: 0, \n                      status: \"You guessed incorrectly\", \n                      maxScore: maximumScore,\n                      topScores: filteredTopScores,\n                      guessedIds: []});\n      }\n    } else {\n\n      // pushed clicked Id in the guessedIds array\n      this.state.guessedIds.push(id);\n      // push length of guessedIds into the topScores array\n      this.state.topScores.push(this.state.guessedIds.length);\n      // update the components score when clicked once\n      this.setState({ score: this.state.score + 1, \n                      status: \"You guessed correctly\", \n                      });\n      \n    }\n    // shuffle Facecards when card is clicked\n    this.randomizeFaces(this.state.faces);\n  };\n\n  randomizeFaces = (arr) => {\n    // shuffle Facecards\n    arr.sort(() => 0.5 - Math.random());\n    // set the faces object to the new shuffled array\n    this.setState({ faces: arr })\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar status={this.state.status} score={this.state.score} maxScore={this.state.maxScore} />\n        <Header />\n        <Container>\n        {this.state.faces.map(face => (\n          <Facecard \n            id={face.id}\n            name={face.name}\n            image={face.image}\n            handleIncrement={this.handleIncrement}\n          />)\n        )}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}